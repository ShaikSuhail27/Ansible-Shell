- name: install the shipping component
  hosts: shipping
  become: yes
  tasks:
  - name: Setup the java environment by installing maven package
    ansible.builtin.yum:
      name: maven
      state: installed

  - name: Check whether the user exists or not
    ansible.builtin.command: id roboshop
    register: USERID
    ignore_errors: true

  - name: Create the user
    ansible.builtin.user:
      name: roboshop
    when: USERID.rc != 0

  - name: Check whether the directory exists or not
    ansible.builtin.stat:
      path: /app
    register: Directory

  - name: print the directory existence output
    ansible.builtin.debug:
      msg: "Output is : {{Directory}}"

  - name: Create the app directory
    ansible.builtin.file:
      path: /app
      state: directory
    when: Directory.stat.exists == false

  - name: Download the Shipping component
    ansible.builtin.get_url:
      url: https://roboshop-builds.s3.amazonaws.com/shipping.zip
      dest: /tmp

  - name: Extract the shipping file into app directory
    ansible.builtin.unarchive:
      src: /tmp/shipping.zip
      dest: /app
      remote_src: yes
    
  - name: Install the packages
    ansible.builtin.command: mvn clean package
    args:
      chdir: /app
    
  - name: Renaming the file
    ansible.builtin.command: "mv target/shipping-1.0.jar shipping.jar"
    args:
      chdir: /app

  - name: Copying the shipping service file
    ansible.builtin.copy:
      src: shipping.service
      dest: /etc/systemd/system/shipping.service
    
  - name: Reload the Service
    ansible.builtin.systemd
      daemon_reload: yes
  
  - name: Install the mysql client
    ansible.builtin.yum
      name: mysql
      state: installed
  
  - name: Load the schema
    ansible.builtin.shell: "mysql -h mysql.suhaildevops.online -uroot -pRoboShop@1 < /app/schema/shipping.sql"

  - name: enabling and Starting the service
    ansible.buitlin.service
      name: shipping
      state: started
      enabled: yes